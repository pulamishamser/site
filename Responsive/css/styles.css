
* {
  box-sizing: border-box;margin: 0;padding: 0;  font-family: Arial;
}


Skip to content

DEV Community üë©‚Äçüíªüë®‚Äçüíª
Create account

183

38

259

Cover image for Don't use 100vh for mobile responsive
Nirazan Basnet
Nirazan Basnet
Posted on May 4

Don't use 100vh for mobile responsive
#
javascript
#
css
#
html
#
webdev
Generally, we use height:100vh for fullscreen layout which is easy hack and convenient way to get better design.

Example
.content {
   height: 100vh;
}
But when we test our design on actual device, we encounter several issues:

Mostly Chrome and Firefox browsers on mobile have got a UI (address bar etc) at the top.
On Safari it get's more tricky address bar is at the bottom.
Different browsers have different sized viewports
Mobile devices calc browser viewport as (top bar + document + bottom bar) = 100vh
Whole document is filled to the page using 100vh
Problems
On Chrome
GIFChrome 100vh issue

Scrollbar issues has been detected. Bad user flow and difficult to navigate the content.

Note: I have also tested this issues on safari which makes more bad user flow

Solutions
Detect the height of the app by using JS
Setting the height of the page (using javascript) with the window.innerheight property.
const documentHeight = () => {
 const doc = document.documentElement
 doc.style.setProperty('--doc-height', `${window.innerHeight}px`)
}
window.addEventListener(‚Äòresize‚Äô, documentHeight)
documentHeight()
Using, CSS Variable
:root {
 --doc-height: 100%;
}

html,
body {
 padding: 0;
 margin: 0;
 height: 100vh; /* fallback for Js load */
 height: var(--doc-height);
}
Here, documentHeight function sets new style property var('--doc-height') and includes current window height.

Final Results
Chrome Browser
GIFCSS 100vh viewport

Note: There is no any vertical extra scrollbar is appearing now also no issues on Safari too. The bottom address bar of safari is always on the bottom which makes good user flow to the website

Conclusion
üëèüëè By coming this far I hope you can solve the mobile devices viewport issues. So, I suggest you give it a try on your project and enjoy it!

Feel free to share your thoughts and opinions and leave me a comment if you have any problems or questions.

Till then,
Keep on Hacking, Cheers

Top comments (38)

Subscribe
pic
Add to the discussion
 
 
joelbonetr profile image
JoelBonetR
‚Ä¢
May 4

You never should use static measurements to set a height nor a width unless it's completely necessary.

On the other hand, using min-height: 100vh; is totally Ok.
Or:
height: 100vh; 
overflow-y: scroll;
depending on what you want to achieve


16
Like
 
 
ivanjeremic profile image
Ivan Jeremic
‚Ä¢
May 4

window innerHeight is safer and there are observers which you can use, I have a powerful React hook which does this, using 100vh is unsafe to use and very likely to break in some browsers.


3
Like
 
 
joelbonetr profile image
JoelBonetR
‚Ä¢
May 5 ‚Ä¢ Edited on

I'm not supporting IE since long time ago plus checked the usage for Opera Mini since 5 years ago in multiple webapps in production with hundreds of thousands of users, still got 0%: caniuse.com/viewport-units

Using JavaScript has some drawbacks as well:

When using SSR you can not pre-render window/document API-related stuff. So you need to defer this to the client, which usually deals to CLS (Cumulative Layout Shifting) and thus a worse user-experience and a worse score in core web vitals, which lowers your SEO.
You need to observe a given identifier to know when it exists, otherwise you can get a "Can't get innerHeight of undefined", which means you add an extra event-listener i.e. resize event.
If you use anu Reactive library or framework such React, adding those listeners on a Hook will cause a re-render since the beginning.
It's slower than CSS Only approach.
In CSS you can also use a calc to extract the navbar size if not fixed just like that:
.containerElement {
  min-width: calc(100vh - 80px);
}
Plus using min-height this way lets the content to grow more than a viewport if it's needed automagically (smartphone in landscape is a good test for that).


Note that the first one grows more than a viewport due to its texts getting more space.
The last one is just a viewport height. üòÅ


5
Like
Thread
 
ivanjeremic profile image
Ivan Jeremic
‚Ä¢
May 5

Re-render on window size change is not a problem since this is a very rare event and it really on re-renders on size change. Also Safari mobile has lots of problems with 100vh


3
Like
Thread
 
joelbonetr profile image
JoelBonetR
‚Ä¢
May 5 ‚Ä¢ Edited on

Not at all. Issues related with smartphone try to artificially alter the behavior based on observation of the outer picture.

I mean, the browser UI is not part of the DOM, hence it will look the same in any website.

While altering your site based on browser+device makes your webApp consistent across-devices, usually an individual who's used to a given browser or a given device will expect that things to happen.

Moreover converting your WebApp into a PWA or making a native webview for iOS and/or Android, will behave different than opening it in the browser.

So each approach has pros and cons, just need to define whad do you really need for that specific use-case. üòä

Last but not least, let me introduce you to @supports feature query: spec, in which you can add vendor prefixed conditions to know which browser rendered your webApp and thus apply a calc on it like that:
@supports (-moz-appearance:meterbar) {
  /* We're on Mozilla! */
  min-height: calc(100vh - 20px);
}
Or using Browser Hacks:
@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
   /* We are on Internet Explorer! */
   min-height: calc(100vh - 10px);
}
Hope it helps somehow


5
Like
Thread
 
lexlohr profile image
Alex Lohr
‚Ä¢
May 6

Fun fact: I'm actually the guy who came up with the msie10+ detection hack you mention in your last example.

Unfortunately, since the wrongful handling of 100vh in mobile browsers is not by a fixed height, you can only using the maximum deviation to fix the issue, which then results in large parts of the screen being unused.

Also, reading innerHeight and writing it to a CSS variable won't take too much time and CPU cycles; detecting scroll movements that should trigger the issue and removing the listener if it doesn't arise will be much more involved.


5
Like
Thread
 
joelbonetr profile image
JoelBonetR
‚Ä¢
May 6

Sure that last paragraph is what solves any situation I can think off, there's no point of discussion here.

I'm trying to define in my head all the situations in which that makes a real difference and not just a "some pixels extra-scroll" thingy, and asking me "is there any alternative way?" Just because linking information is the way I can remember something for years plus I usualy learn something else while trying to answer the question üòÖ.


2
Like
Thread
 
ivanjeremic profile image
Ivan Jeremic
‚Ä¢
May 6

@joelbonetr I don't support IE too but we have a new IE on the block called Safari which is the worst in implementing standards and compatible APIs. They are literally thinking browsers are not needed anymore and in a few years they are gone and everything is an app...


3
Like
Thread
 
joelbonetr profile image
JoelBonetR
‚Ä¢
May 6

Hahaha I know, they have implemented better flex compat in the last 2 years at least, it was a pain in the ass before that but yes, Safari is the new IE.

I work with Windows 11 + WSLg in my personal desktop and Windows 10 + WSL2 in company's laptop so I bought an iPad mini just to test things in Safari as reference (or in any browser because in iPad OS or iOS all browsers rely on Safari üòê).


3
Like
 
 
nirazanbasnet profile image
Nirazan Basnet
‚Ä¢
May 4

Here, I am not using static measurements. From js we can detect the app height and it automatically fits it and when we encounter browsers address bar then using 100vh does not solve the problem. In my case, above code doesn't solve the issue. But thanks for the reply.


1
Like
 
 
joelbonetr profile image
JoelBonetR
‚Ä¢
May 5 ‚Ä¢ Edited on

Positioning the bottom bar with
position: fixed;
left: 0;
right: 0;
bottom: 0;
will fix your nav bar to the bottom without issues, then you can get the scroll to modify it's position to ptovide a js effect or to trigger a keyframe


5
Like
 
 
ben profile image
Ben Halpern
‚Ä¢
May 4

This seems like a really useful pattern for using CSS variables in general. Thanks for the post.

Of course, for a lot of use cases the added complexity might not be worth the UX wins vs a slightly alternative design choice. Ultimately it's about helping the user do a thing they came to do, and roundabout complexity isn't exactly helping all the time. But figuring that out and agreeing on it with the designer is easier said than done!

IMO this sort of thing is best approached with a sense of repeating this pattern consistently where needed for styling to ensure it's not a one-off. üôÇ


5
Like
 
 
alohci profile image
Nicholas Stimpson
‚Ä¢
May 4

Coming soon: lv*, sv* & dv* units to address this issue.


7
Like
 
 
gmutschler profile image
Guillaume M.
‚Ä¢
May 5 ‚Ä¢ Edited on

Wow that's interesting.

Until its validation, I wonder how the css env() function could be used to solve our 100vh issue. (it already has a quite broad browser support)


1
Like
 
 
nirazanbasnet profile image
Nirazan Basnet
‚Ä¢
May 6 ‚Ä¢ Edited on

Earlier I tried using env() but it doesn't solve my issue so need to revert back.


1
Like
 
 
nirazanbasnet profile image
Nirazan Basnet
‚Ä¢
May 4

Might be helpful but does not know anything about this so far :)


1
Like
 
 
nosovandrew profile image
Andrew Nosov
‚Ä¢
May 12

Cool solution, it helped me, thank you! In addition I've improved this approach with some debounce mechanism (setTimeout) that will limit count of function executions.
let timeoutId = null;
const documentHeight = () => {
  clearTimeout(timeoutId); // avoid execution of previous timeouts
  timeoutId = setTimeout(() => {
   const doc = document.documentElement;
   doc.style.setProperty('--doc-height', `${window.innerHeight}px`)
  }, 200);
};
window.addEventListener(‚Äòresize‚Äô, documentHeight);
documentHeight();

2
Like
 
 
nirazanbasnet profile image
Nirazan Basnet
‚Ä¢
May 12

Tankyou !! Appreciated :)


1
Like
 
 
endymion1818 profile image
Ben Read
‚Ä¢
May 5

So this is a bit of a heated topic isn‚Äôt it?! Whilst I applaud your ingenuity I‚Äôd be careful about doing this kind of thing with JsS, or as some users suggest, doing a calc- because that assumes you know the height of that element.

Instead use -webkit-fill-available

Here‚Äôs some more information about that css rule: allthingssmitty.com/2020/05/11/css...

This situation is far from ideal and I know the Safari team are working hard to address these issues so they don‚Äôt become ‚Äúthe next IE‚Äù.


2
Like
 
 
ryanpearson profile image
Ryan Pearson
‚Ä¢
May 6 ‚Ä¢ Edited on

This is a good option if you DONT need to use css Calc() function
ex:

body {
min-height: calc(100vh-70px);
/* mobile viewport bug fix */
min-height: -webkit-fill-available;
}

The webkit solution would not take into account the 70px adjustment

I've used the JS solution described in this post and it seems to be the best available option at the moment (until the new dynamic viewport units are adopted)


4
Like
 
 
nirazanbasnet profile image
Nirazan Basnet
‚Ä¢
May 7

Thanks for using this solution üëç


1
Like
 
 
joshmendes20 profile image
Josh Mendes
‚Ä¢
May 10

Interesting post. I have been wondering about this issue so thanks for posting. It 's really very nice and Useful post. Thanks tunnel rush uno online


2
Like
 
 
nirazanbasnet profile image
Nirazan Basnet
‚Ä¢
May 22

Glad this helped you


1
Like
 
 
liviufromendtest profile image
Liviu Lupei
‚Ä¢
May 5

Nicely done for thinking of cross-browser issues.
I'm using Safari on my phone.


2
Like
 
 
nirazanbasnet profile image
Nirazan Basnet
‚Ä¢
May 7

Thank you üëç


1
Like
 
 
leob profile image
leob
‚Ä¢
May 4

Meaning, most people are doing this wrong? Or maybe most people already know this?


2
Like
 
 
nirazanbasnet profile image
Nirazan Basnet
‚Ä¢
May 4

Due to browser dependencies and layout issue we need to tackle this kind of problem so it depends on project requirement. But, I suggest not to use 100vh on smaller devices.


2
Like
 
 
andrewbaisden profile image
Andrew Baisden
‚Ä¢
May 10

Many ways to solve the same problem.


2
Like
 
 
ambriel profile image
Ambriel Goshi
‚Ä¢
May 20

This is helpful.


2
Like
 
 
nirazanbasnet profile image
Nirazan Basnet
‚Ä¢
May 22

Thanks üëç


1
Like
 
 
kelseyjj profile image
Kelsey Jones
‚Ä¢
May 20

Glad I came across this.


2
Like
 
 
nirazanbasnet profile image
Nirazan Basnet
‚Ä¢
May 22

Thanks üëç


1
Like
 
 
rasmrq profile image
Pace Dev
‚Ä¢
May 15

So thanks uuu


2
Like
 
 
ibenchellali profile image
IDRESS BENCHELLALI
‚Ä¢
May 13

Thank you for this great article!


2
Like
 
 
nirazanbasnet profile image
Nirazan Basnet
‚Ä¢
May 16

Your welcome :)


1
Like
 
 
balchen profile image
balchen
‚Ä¢
Aug 11

I'm experiencing the exact same problem, and came across this post (among many others on the same subject). While it does fix the issue for Android and iOS devices, it breaks the page for desktop (Chrome and Firefox, at least).

The scrollbar I don't want now appears on desktop.

If I subtract 1px from innerHeight in the code, there's no scroll bar on desktop. It's a hack. Don't know why 1px makes the difference in this case.


Like
 
 
lico profile image
SeongKuk Han
‚Ä¢
Aug 5

Thank you! It worked for me!


1
Like
View full discussion (38 comments)
Some comments have been hidden by the post's author - find out more

Code of Conduct ‚Ä¢ Report abuse
üåö Friends don't let friends browse without dark mode.
Sorry, it's true.

Read next
daryllukas profile image
Form Validation in React using Formik
Daryl Lukas - Oct 17

wes_walke profile image
7 Spicy Tailwind CSS Buttons
Weston Walker üìö - Oct 8

makendrang profile image
Learn How to Deploy Website Using Hugo on AWS Amplify in Ten Minutes
MakendranG - Oct 8

clarencejulu profile image
Quick Example on using LocalStorage in React
Clarence Onumajulu - Oct 8


Nirazan Basnet
Follow
Exploring the new tools and techniques on frontend development. Loves to meet up with new people and participate in the community. I do interesting stuff on codepen https://codepen.io/nirazanbasnet
LOCATION
Kathmandu, Nepal
EDUCATION
Be IT
JOINED
Dec 9, 2017
More from Nirazan Basnet
HTML target=_blank vs target=blank
#html #webdev
Fully accessible Menu components by headless UI tailwindcss
#javascript #react #tailwindcss #webdev
Get Instant Country Flags
#react #javascript #webdev
:root {
 --doc-height: 100%;
}

html,
body {
 padding: 0;
 margin: 0;
 height: 100vh; /* fallback for Js load */
 height: var(--doc-height);
}
DEV Community üë©‚Äçüíªüë®‚Äçüíª ‚Äî A constructive and inclusive social network for software developers. With you every step of your journey.

Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.

Made with love and Ruby on Rails. DEV Community üë©‚Äçüíªüë®‚Äçüíª ¬© 2016 - 2022.

/* Add a gray background color with some padding */
body{ 
  margin: 0;
min-height: 100vh;
  background: lightslategrey;
  overflow-x: hidden;
   padding: 0;
width: 100%;

}
  
/* Header/Blog Title */
.header {
width: 100%;
margin-top: 10px;
  font-size: 15px;
  background: #fff;
  align: center; 
  min-height:100px;
 overflow-x:hidden;      /*Hide horizontal scrolbar*/
}
 
.split{
  display:flex; 
  gap: 2em;}

@media screen (max-width: 40em){

.split{displayLblock;}


}

h1;h2 {font-size: 20px;word-break: break-all;}
.row {
  margin: 8px -16px;
  display: flex;
}

/* Add padding BETWEEN each column */
.row,
.row >.column {
  padding: 8px;
}
@media screen and (min-width: 400px){
width: 100%;
@media screen and (max-width: 768px){
/* Create four equal columns that floats next to each other */
.column {
  float: left;
  width: 25%;
}
/* Responsive layout - makes a two column-layout instead of four columns */
@media screen and (max-width: 960px){
  .column {
    width: 50%;
  }
}
/* Responsive layout - makes the two columns stack on top of each other instead of next to each other */
@media screen and (max-width: 480px) {
  .column {
    width: 100%;

/* Create two columns that floats next to each other */
.col{
  float: left;
  width:30%;
  padding: 10px;
}}



/* Left column */
.leftcolumn {   
  float: left;
  width: 75%;
}

/* Right column */
.rightcolumn {
  float: left;
  width: 25%;
  padding-left: 20px;
}
.col-sm{ float: left;
  width: 25%;}



/* Fake image */
.fakeimg {
  background-color: #aaa;
  width: 100%;
  padding: 20px;
}

/* Add a card effect for articles */
.card {
   background-color: #004b8e;
   padding: 10px;
   margin-top: 10px;
}

/* Clear floats after the columns */
.row:after {
  content: "";
  display: table;
  clear: both;
}

/* Footer */
.footer {
  padding: 20px;
  text-align: center;
  background:#004b8e;
  margin-top: 20px;

}

/* Responsive layout - when the screen is less than 800px wide, make the two columns stack on top of each other instead of next to each other */
@media screen and (max-width: 800px) {
  .leftcolumn, .rightcolumn {   
    width: 100%;
    padding: 0;
  }
}







